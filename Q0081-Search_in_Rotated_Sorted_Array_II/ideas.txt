Solution 1:
Find the pivot then do binary search.

Time Complexity: O(N). Since finding the pivot can take up to O(N).
Space Complexity: O(N) extra space used to copy array.

Solution 2:
Use condition check to combine searching pivot and finding target.
Let's refer to the first sorted array as F and second as S.

Case 1: arr[mid] lies in F, target lies in S: Since S starts after F ends, we know that element lies here:(mid, end].
Case 2: arr[mid] lies in the S, target lies in F: Similarly, we know that element lies here: [start, mid).
Case 3: Both arr[mid] and target lie in F: since both of them are in same sorted array,
we can compare arr[mid] and target in order to decide how to reduce search space.
Case 4: Both arr[mid] and target lie in S: Again, since both of them are in same sorted array,
we can compare arr[mid] and target in order to decide how to reduce search space.

But there is a catch, if arr[mid] equals arr[start],
then we know that arr[mid] might belong to both F and S and hence we cannot find the relative position of target from it.

Time complexity : O(N) worst case, O(logN) best case.

Space complexity : O(1)O(1).
