1. Idea is, we will consider every element a[i] to be a candidate for the area calculation.
That is, if a[i] is the minimum element then what is the maximum area possible for all such rectangles?
We can easily figure out that it's a[i]*(R-L+1-2) or a[i] * (R-L-1),
where a[R] is first subsequent element(R>i) in the array just smaller than a[i],
similarly a[L] is first previous element just smaller than a[i].
(or take a[i] as a center and expand it to left and right and stop when first just smaller elements are found on both the sides).

2. We add the element a[i] directly to the stack if it's greater than the peak element (or a[i-1] ),
because we are yet to find R for this. Can you tell what's L for this? Exactly, it's just the previous element in stack.
(We will use this information later when we will pop it out).

3. What if we get an element a[i] which is smaller than the peak value,
it is the R value for all the elements present in stack which are greater than a[i].
Pop out the elements greater than a[i], we have their R value and L value(point 2). and now push a[i] and repeat.

Time complexity : O(n). n numbers are pushed and popped.

Space complexity : O(n).
