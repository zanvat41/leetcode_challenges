Time complexity :
hasNext: Return true if there are any elements left in the stack. Otherwise, we return false. O(1).

next: Two major operations. One is where we pop an element from the stack which becomes the next smallest element to return. This is O(1).
However, we then make a call to our helper function _inorder_left which iterates over a bunch of nodes. This is clearly O(N) in the worst case.
However, the important thing to note here is that we only make such a call for nodes which have a right child. Otherwise, we simply return.
Also, even if we end up calling the helper function, it won't always process N nodes. They will be much lesser.
Only if we have a skewed tree would there be N nodes for the root. But that is the only node for which we would call the helper function.

Thus, the amortized (average) time complexity for this function would still be O(1).

Space complexity: O(N), which is occupied by our custom stack for simulating the inorder traversal.
