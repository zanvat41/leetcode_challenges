DP Solution:
dp[day_number][used_transaction_number][stock_holding_status]:
Keep holding the stock:
dp[i][j][1] = dp[i-1][j][1]

Keep not holding the stock:
dp[i][j][0] = dp[i-1][j][0]

Buying, when j>0:
dp[i][j][1] = dp[i-1][j-1][0]-prices[i]

Selling:
dp[i][j][0] = dp[i-1][j][1]+prices[i]

We can combine they together to find the maximum profit:
dp[i][j][1] = max(dp[i-1][j][1], dp[i-1][j-1][0]-prices[i])

dp[i][j][0] = max(dp[i-1][j][0], dp[i-1][j][1]+prices[i])

Time Complexity: O(nk) if 2k <= n, O(n) if 2k>n, where n is the length of the prices sequence, since we have two for-loop.

Space Complexity: O(nk) without state-compressed, and O(k) with state-compressed.



Merging and Deleting Solution:
The general idea is to store all consecutively increasing subsequence as the initial solution.
Then delete or merge transactions until the number of transactions less than or equal to k.


Time Complexity: O(n(n−k)) if 2k <= n, O(n) if 2k > n. The maximum size of transactions is O(n), and we need O(n−k) iterations.

Space Complexity: O(n), since we need a list to store transactions.
