The basic idea is to find the longest palindrome that starts with index 0.

Two pointers with recursion:
Time complexity: O(n^2).
Each iteration of shortestPalindrome is linear in size of substring and the maximum number of recursive calls can be n/2 times.
Let the time complexity of the algorithm be T(n).
Since, at the each step for the worst case, the string can be divide into 2 parts and we require only one part for further computation.
Hence, the time complexity for the worst case can be represented as : T(n)=T(n-2)+O(n). So, T(n) = O(n) + O(n-2) + O(n-4) + ...+O(1) which is O(n^2).

Space complexity: O(n).


KMP string matching method:
Time complexity: O(n).

In every iteration of the inner while loop, index decreases until it reaches 0 or until it matches.
After that, it is incremented by one. Therefore, in the worst case, index can only be decreased up to n times and increased up to n times.
Hence, the algorithm is linear with maximum (2 * n) * 2 iterations.

Space complexity: O(n).
