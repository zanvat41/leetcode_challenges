Recursion method:
If there were no "*", we simply check from left to right if each character of the text matches the pattern.

When a star is present, we may need to check many different suffixes of the text and see if they match the rest of the pattern.
If a star is present in the pattern, it will be in the second position p[1].
Then, we may ignore this part of the pattern, or delete a matching character in the text.
If we have a match on the remaining strings after any of these operations, then the initial inputs matched.

Time Complexity: Let T,P be the lengths of the text and the pattern respectively.
In the worst case, a call to match(text[i:], pattern[2j:]) will be made C(i, i+j) times,
and strings of the order O(T−i) and O(P−2∗j) will be made. Thus, the complexity is bounded by O((T+P)*2^{T + P/2)).

Space Complexity: For every call to match, we will create those strings as described above, possibly creating duplicates.
This will also take a total of O((T+P)*2^{T + P/2)) space, even though there are only order O(T^2 + P^2) unique suffixes
of P and T that are actually required.

DP method:
dp(i, j): is true if text[i:] and p[j:] match. Similar to recursion method.

Time Complexity: O(TP).

Space Complexity: O(TP).

